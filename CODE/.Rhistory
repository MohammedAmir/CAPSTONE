{
if(CUISINE == "Bar")
{
print ("3")
}
else
{
if(CUISINE == "Cafe")
{
print ("4")
}
else
{
if(CUISINE == "Caribbean")
{
print ("5")
}
else
{
if(CUISINE == "Deli")
{
print ("6")
}
else
{
if(CUISINE == "Dessert")
{
print ("7")
}
else
{
if(CUISINE == "European")
{
print ("8")
}
else
{
if(CUISINE == "Far Eastern")
{
print ("9")
}
else
{
if(CUISINE == "Mediterranean")
{
print ("10")
}
else
{
if(CUISINE == "Middle Eastern")
{
print ("11")
}
else
{
if(CUISINE == "North American")
{
print ("12")
}
else
{
if(CUISINE == "Juicery")
{
print ("13")
}
else
{
if(CUISINE == "Pastries")
{
print ("14")
}
else
{
if(CUISINE == "South Asian")
{
print ("15")
}
else
{
if(CUISINE == "South East Asian")
{
print ("16")
}
else
{
if(CUISINE == "Latin American")
{
print ("17")
}
else
{
print ("0")
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
## Apply the Index function to cuisine type column
Dinesafe$CUISINE_IDX <- mapply(CUISINE_IDX,Dinesafe$Dinesafe.CUISINE_TYPE)
Dinesafe
## Remove establishment id and Cuisine Type Columns from data frame
Dinesafe <- Dinesafe[,-c(1, 4)]
head(Dinesafe)
## Convert Cuisine Index from factor to numeric value
Dinesafe$CUISINE_IDX <- as.numeric((Dinesafe$CUISINE_IDX))
head(Dinesafe)
str(Dinesafe)
## Normalize data using scale function using  using caret package
Dinesafe_normal  <- scale(Dinesafe)
head(Dinesafe_normal)
## Randomize the dataset selection
rand <- runif(nrow(Dinesafe_normal))
Dinesafe_random <- Dinesafe_normal[order(rand),]
## Split training to test dataset
Dinesafe_train <- Dinesafe_random[1:2000,]    ## two third of data set for training
Dinesafe_test  <- Dinesafe_random[2001:2723,] ## one third of data set for testing
Dinesafe_train_label <- Dinesafe[1:2000,4]
Dinesafe_test_label  <- Dinesafe[2001:2723,4]
# Determine best K value in KNN Crosss Validation
set.seed(3333)
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
knn_fit <- train(CUISINE_IDX ~., data = Dinesafe_train, method = "knn", trControl=trctrl, preProcess = c("center", "scale"),tuneLength = 10)
knn_fit
plot(knn_fit)
## Split training to test dataset
##set.seed(123)
df_random <- Dinesafe_normal
#n <- nrow(scaleit)
rand <- runif(nrow(df_random))
df_random <- Dinesafe_normal[order(rand),]
df_train <- df_random[1:2000,]    ## two third of data set for training
df_test  <- df_random[2001:2723,] ## one third of data set for testing
df_train_target <- Dinesafe2[1:2000,4]
df_test_target  <- Dinesafe2[2001:2723,4]
#head(scaleit)
head(df_train)
head(df_test)
# Determine best K value in KNN Crosss Validation
set.seed(3333)
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
knn_fit <- train(CUISINE_IDX ~., data = df_train, method = "knn", trControl=trctrl, preProcess = c("center", "scale"),tuneLength = 10)
knn_fit
plot(knn_fit)
library(ISLR)
library(caret)
# Determine best K value in KNN Crosss Validation
set.seed(3333)
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
knn_fit <- train(CUISINE_IDX ~., data = df_train, method = "knn", trControl=trctrl, preProcess = c("center", "scale"),tuneLength = 10)
knn_fit
plot(knn_fit)
## Split training to test dataset
##set.seed(123)
df_random <- Dinesafe_normal
#n <- nrow(scaleit)
rand <- runif(nrow(df_random))
df_random <- Dinesafe_normal[order(rand),]
df_train <- df_random[1:2000,]    ## two third of data set for training
df_test  <- df_random[2001:2723,] ## one third of data set for testing
df_train_target <- Dinesafe[1:2000,4]
df_test_target  <- Dinesafe[2001:2723,4]
#head(scaleit)
head(df_train)
head(df_test)
## Split training to test dataset
##set.seed(123)
df_random <- Dinesafe_normal
#n <- nrow(scaleit)
rand <- runif(nrow(df_random))
df_random <- Dinesafe_normal[order(rand),]
df_train <- df_random[1:2000,]    ## two third of data set for training
df_test  <- df_random[2001:2723,] ## one third of data set for testing
df_train_target <- Dinesafe[1:2000,4]
df_test_target  <- Dinesafe[2001:2723,4]
#head(scaleit)
head(df_train)
head(df_test)
## Remove establishment id and Cuisine Type Columns from data frame
Dinesafe <- Dinesafe[,-c(1, 4)]
head(Dinesafe)
knitr::opts_chunk$set(echo = TRUE)
library(ISLR)
library(caret)
Dinesafe = read.csv("D:/CAPSTONE/CAPSTONE/DATASET/Final_DineSafe.csv", na.strings='NULL')
Dinesafe <- data.frame(Dinesafe$ESTABLISHMENT_ID, Dinesafe$REVIEW, Dinesafe$VALUE, Dinesafe$CUISINE_TYPE)
Dinesafe <-  unique(Dinesafe)
str(Dinesafe)
head(Dinesafe)
## Index the cuisine Type label
CUISINE_IDX <- function(CUISINE)
{
if(CUISINE == "African")
{
print ("1")
}
else
{
if(CUISINE == "Bakeries")
{
print ("2")
}
else
{
if(CUISINE == "Bar")
{
print ("3")
}
else
{
if(CUISINE == "Cafe")
{
print ("4")
}
else
{
if(CUISINE == "Caribbean")
{
print ("5")
}
else
{
if(CUISINE == "Deli")
{
print ("6")
}
else
{
if(CUISINE == "Dessert")
{
print ("7")
}
else
{
if(CUISINE == "European")
{
print ("8")
}
else
{
if(CUISINE == "Far Eastern")
{
print ("9")
}
else
{
if(CUISINE == "Mediterranean")
{
print ("10")
}
else
{
if(CUISINE == "Middle Eastern")
{
print ("11")
}
else
{
if(CUISINE == "North American")
{
print ("12")
}
else
{
if(CUISINE == "Juicery")
{
print ("13")
}
else
{
if(CUISINE == "Pastries")
{
print ("14")
}
else
{
if(CUISINE == "South Asian")
{
print ("15")
}
else
{
if(CUISINE == "South East Asian")
{
print ("16")
}
else
{
if(CUISINE == "Latin American")
{
print ("17")
}
else
{
print ("0")
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
## Apply the Index function to cuisine type column
Dinesafe$CUISINE_IDX <- mapply(CUISINE_IDX,Dinesafe$Dinesafe.CUISINE_TYPE)
head(Dinesafe)
## Remove establishment id and Cuisine Type Columns from data frame
Dinesafe_feature <- Dinesafe[,-c(1, 4)]
head(Dinesafe_feature)
## Convert Cuisine Index from factor to numeric value
Dinesafe$CUISINE_IDX <- as.numeric((Dinesafe$CUISINE_IDX))
head(Dinesafe)
str(Dinesafe)
## Convert Cuisine Index from factor to numeric value
Dinesafe$CUISINE_IDX <- as.numeric((Dinesafe$CUISINE_IDX))
head(Dinesafe)
str(Dinesafe)
## Remove establishment id and Cuisine Type Columns from data frame
Dinesafe_feature <- Dinesafe[,-c(1, 4)]
head(Dinesafe_feature)
## Convert Cuisine Index from factor to numeric value
Dinesafe$CUISINE_IDX <- as.numeric((Dinesafe$CUISINE_IDX))
head(Dinesafe)
str(Dinesafe)
## Remove establishment id and Cuisine Type Columns from data frame
Dinesafe_feature <- Dinesafe[,-c(1, 4)]
head(Dinesafe_feature)
## Convert Cuisine Index from factor to numeric value
Dinesafe_feature$CUISINE_IDX <- as.numeric((Dinesafe_feature$CUISINE_IDX))
head(Dinesafe_feature)
str(Dinesafe_feature)
## Normalize data using scale function using  using caret package
Dinesafe_normal  <- scale(Dinesafe_feature)
head(Dinesafe_normal)
## Split training to test dataset
##set.seed(123)
df_random <- Dinesafe_normal
#n <- nrow(scaleit)
rand <- runif(nrow(df_random))
df_random <- Dinesafe_normal[order(rand),]
df_train <- df_random[1:2000,]    ## two third of data set for training
df_test  <- df_random[2001:2723,] ## one third of data set for testing
df_train_target <- Dinesafe[1:2000,4]
df_test_target  <- Dinesafe[2001:2723,4]
#head(scaleit)
head(df_train)
head(df_test)
# Determine best K value in KNN Crosss Validation
set.seed(3333)
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
knn_fit <- train(CUISINE_IDX ~., data = df_train, method = "knn", trControl=trctrl, preProcess = c("center", "scale"),tuneLength = 10)
knn_fit
plot(knn_fit)
## Build KNN Model
require(class)
library(class)
k = 13
knn_model <- knn(train = df_train, test = df_test, cl=df_test_target, k)
#validate
#table(result , Dinesafe_train_label)
## Build KNN Model
require(class)
library(class)
k = 13
knn_model <- knn(train = df_train, test = df_test, cl=df_test_target, k)
#validate
#table(result , Dinesafe_train_label)
str(df_train_target)
str(df_train)
## Build KNN Model
require(class)
library(class)
k = 13
knn_model <- knn(train = df_train, test = df_test, cl=df_test_target, k)
#validate
#table(result , Dinesafe_train_label)
## Build KNN Model
require(class)
library(class)
k = 13
knn_model <- knn(train = df_train, test = df_test, cl=df_test_target, k)
#validate
#table(result , Dinesafe_train_label)
## Build KNN Model
require(class)
library(class)
k = 13
knn_model <- knn(train = df_train, test = df_test, cl=df_train_target, k)
#validate
#table(result , Dinesafe_train_label)
## Build KNN Model
require(class)
library(class)
k = 13
knn_model <- knn(train = df_train, test = df_test, cl=df_train_target, k)
knn_model
#validate
#table(result , Dinesafe_train_label)
# Determine best K value in KNN Crosss Validation
set.seed(3333)
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
knn_fit <- train(CUISINE_IDX ~., data = df_train, method = "knn", trControl=trctrl, preProcess = c("center", "scale"),tuneLength = 10)
knn_fit
plot(knn_fit)
## Build KNN Model
require(class)
library(class)
k = 13
knn_model <- knn(train = df_train, test = df_test, cl=df_train_target, k)
knn_model
#validate
#table(result , Dinesafe_train_label)
## Build KNN Model
require(class)
library(class)
k = 13
knn_model <- knn(train = df_train, test = df_test, cl=df_train_target, k)
knn_model
#validate
table(result , Dinesafe_train_label)
## Build KNN Model
require(class)
library(class)
k = 13
knn_model <- knn(train = df_train, test = df_test, cl=df_train_target, k)
knn_model
#validate
table(knn_model , df_train_target)
# Determine best K value in KNN Crosss Validation
set.seed(3333)
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3, ,classProbs=TRUE,summaryFunction = twoClassSummary)
knn_fit <- train(CUISINE_IDX ~., data = df_train, method = "knn", trControl=trctrl, preProcess = c("center", "scale"),tuneLength = 10)
knn_fit
plot(knn_fit)
# Determine best K value in KNN Crosss Validation
set.seed(3333)
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3, ,classProbs=TRUE,summaryFunction = twoClassSummary)
knn_fit <- train(CUISINE_IDX ~., data = df_train, method = "knn", trControl=trctrl, preProcess = c("center", "scale"),tuneLength = 10)
knn_fit
plot(knn_fit)
# Determine best K value in KNN Crosss Validation
set.seed(3333)
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3, ,classProbs=TRUE,summaryFunction = twoClassSummary)
knn_fit <- train(CUISINE_IDX ~., data = df_train, method = "knn", trControl=trctrl, preProcess = c("center", "scale"),tuneLength = 10)
knn_fit
plot(knn_fit,  print.thres = 0.5, type="S")
knnPredict <- predict(knn_Fit,newdata = df_test )
#Get the confusion matrix to see accuracy value and other parameter values
confusionMatrix(knnPredict, df_test_target )
knnPredict <- predict(knn_Fit,newdata = df_test )
#Get the confusion matrix to see accuracy value and other parameter values
##confusionMatrix(knnPredict, df_test_target )
knnPredict <- predict(knn_Fit,newdata = df_test )
table(knn_Fit,df_test )
#Get the confusion matrix to see accuracy value and other parameter values
##confusionMatrix(knnPredict, df_test_target )
## Build KNN Model
require(class)
library(class)
k = 13
knn_model <- knn(train = df_train, test = df_test, cl=df_train_target, k)
knn_model
## Build KNN Model
require(class)
library(class)
k = 13
knn_model <- knn(train = df_train, test = df_test, cl=df_train_target, k)
table(knn_model, df_train_target)
##knn_model
## Build KNN Model
require(class)
library(class)
k = 13
knn_model <- knn(train = df_train, test = df_test, cl=df_train_target, k)
table(knn_model, df_test_target)
##knn_model
## Build KNN Model
require(class)
library(class)
k = 9  ## sqrt(nrow(Dinesafe2))
result <- knn(train = df_train, test = df_test, cl=df_train_target , k)
#validate
table(result , df_test_target)
## Build KNN Model
require(class)
library(class)
k = 13  ## sqrt(nrow(Dinesafe2))
result <- knn(train = df_train, test = df_test, cl=df_train_target , k)
#validate
table(result , df_test_target)
